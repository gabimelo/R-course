sdfasdf(0(Fdsa )) ldafsld
myfun <- function)fsdad
setwd("~/Projects/R-course")
library(bnlearn)
named_nodes = c("american", "white", "male", "married", "primeage", "over50k")
e = empty.graph(named_nodes)
adj = matrix(0L, ncol = 6, nrow = 6,
dimnames = list(named_nodes, named_nodes))
adj["american", "white"] = 1L
adj["white", "over50k"] = 1L
adj["male", "over50k"] = 1L
adj["married", "over50k"] = 1L
adj["primeage", "over50k"] = 1L
amat(e) = adj
e
installed.packages(Â´ bnlearn')
installed.packages('bnlearn')
install.packages('bnlearn')
library(bnlearn)
named_nodes = c("american", "white", "male", "married", "primeage", "over50k")
e = empty.graph(named_nodes)
adj = matrix(0L, ncol = 6, nrow = 6,
dimnames = list(named_nodes, named_nodes))
adj["american", "white"] = 1L
adj["white", "over50k"] = 1L
adj["male", "over50k"] = 1L
adj["married", "over50k"] = 1L
adj["primeage", "over50k"] = 1L
amat(e) = adj
e
class(e)
df = read.csv("adult.csv")
printPercentages <- function(column){
tab <- with(df, table(income, column))
print(prop.table(tab, margin = 1)*100)
tab <- with(df, table(column, income))
print(prop.table(tab, margin = 1)*100)
}
df$fnlwgt <- NULL
df$occupation <- NULL
df$capital.gain <- NULL
df$capital.loss <- NULL
df$american[df$native.country!="United-States"] <- FALSE
df$american[df$native.country=="United-States"] <- TRUE
df$native.country <- NULL
printPercentages(df$american)
printPercentages(df$sex)
df$overtime[df$hours.per.week > 60] <- "too much"
df$overtime[df$hours.per.week > 40 & df$hours.per.week <= 60] <- "overtime"
df$overtime[df$hours.per.week > 25 & df$hours.per.week <= 40] <- "full time"
df$overtime[df$hours.per.week <= 25] <- "part time"
df$hours.per.week <- NULL
printPercentages(df$overtime)
df$white[df$race == "White"] <- TRUE
df$white[df$race != "White"] <- FALSE
df$race <- NULL
printPercentages(df$white)
df$married[df$relationship=="Husband" | df$relationship=="Wife"] <- TRUE
df$married[df$relationship!="Husband" & df$relationship!="Wife"] <- FALSE
df$relationship <- NULL
df$marital.status <- NULL
printPercentages(df$married)
df$education = gsub("^10th","Dropout",df$education)
df$education = gsub("^11th","Dropout",df$education)
df$education = gsub("^12th","Dropout",df$education)
df$education = gsub("^1st-4th","Dropout",df$education)
df$education = gsub("^5th-6th","Dropout",df$education)
df$education = gsub("^7th-8th","Dropout",df$education)
df$education = gsub("^9th","Dropout",df$education)
df$education = gsub("^Assoc-acdm","Associates",df$education)
df$education = gsub("^Assoc-voc","Associates",df$education)
df$education = gsub("^Bachelors","Bachelors",df$education)
df$education = gsub("^Doctorate","Doctorate",df$education)
df$education = gsub("^HS-grad","HS-Graduate",df$education)
df$education = gsub("^Masters","Masters",df$education)
df$education = gsub("^Preschool","Dropout",df$education)
df$education = gsub("^Prof-school","Prof-School",df$education)
df$education = gsub("^Some-college","HS-Graduate",df$education)
printPercentages(df$education)
df$education.num <- NULL
df$workclass = gsub("^Federal-gov","Govt",df$workclass)
df$workclass = gsub("^Local-gov","Govt",df$workclass)
df$workclass = gsub("^State-gov","Govt",df$workclass)
df$workclass = gsub("^Private","Private",df$workclass)
df$workclass = gsub("^Self-emp-inc","Self-Employed",df$workclass)
df$workclass = gsub("^Self-emp-not-inc","Self-Employed",df$workclass)
df$workclass = gsub("^Without-pay","Not-Working",df$workclass)
df$workclass = gsub("^Never-worked","Not-Working",df$workclass)
printPercentages(df$workclass)
df$age[df$age <= 30] <- "Young"
df$age[df$age > 30 & df$age <= 40] <- "Middle"
df$age[df$age > 40 & df$age <= 65] <- "Senior"
df$age[df$age > 65 & df$age <= 90] <- "Old"
printPercentages(df$age)
df$primeage[df$age == "Young" | df$age == "Old"] <- FALSE
df$primeage[df$age != "Young" & df$age != "Old"] <- TRUE
df$male[df$sex == "Male"] <- TRUE
df$male[df$sex == "Female"] <- FALSE
df$over50k[df$income == "<=50K"] <- FALSE
df$over50k[df$income == ">50K"] <- TRUE
df$income <- NULL
summary(df)
cor(df$married, df$over50k)
cor(df$primeage, df$over50k)
cor(df$male, df$over50k)
cor(df$white, df$over50k)
cor(df$american, df$over50k)
# selecionados: american (true), sex (male), white (true), married (true), age (30 < age <= 65)
# df$age = NULL
# df$workclass = NULL
# df$education = NULL
# df$sex = NULL
# df$overtime = NULL
#
# df$american[df$american == FALSE] <- 0
# df$american[df$american == TRUE] <- 1
# df$white[df$white == FALSE] <- 0
# df$white[df$white == TRUE] <- 1
# df$married[df$married == FALSE] <- 0
# df$married[df$married == TRUE] <- 1
# df$primeage[df$primeage == FALSE] <- 0
# df$primeage[df$primeage == TRUE] <- 1
# df$male[df$male == FALSE] <- 0
# df$male[df$male == TRUE] <- 1
# df$over50k[df$over50k == FALSE] <- 0
# df$over50k[df$over50k == TRUE] <- 1
df$age = NULL
df$workclass = NULL
df$education = NULL
df$sex = NULL
df$overtime =
summary(df)
summary(df)
df$overtime = NULL
summary(df)
bn.fit(e, df)
df$american[df$american == FALSE] <- 0
df$american[df$american == TRUE] <- 1
df$white[df$white == FALSE] <- 0
df$white[df$white == TRUE] <- 1
df$married[df$married == FALSE] <- 0
df$married[df$married == TRUE] <- 1
df$primeage[df$primeage == FALSE] <- 0
df$primeage[df$primeage == TRUE] <- 1
df$male[df$male == FALSE] <- 0
df$male[df$male == TRUE] <- 1
df$over50k[df$over50k == FALSE] <- 0
df$over50k[df$over50k == TRUE] <- 1
bn.fit(e, df)
getwd()
df <- read.csv("albumlist.csv")
xt <- xtabs(~ Genre + Year, data=df)
new_df <- as.data.frame <- (xt)
top_300_genres_years = head(arrange(new_df, desc(Freq)), 300)
install.packages('dplyr')
df <- read.csv("albumlist.csv")
xt <- xtabs(~ Genre + Year, data=df)
new_df <- as.data.frame <- (xt)
top_300_genres_years = head(arrange(new_df, desc(Freq)), 300)
package(dplyr)
df <- read.csv("500albums/albumlist.csv")
xt <- xtabs(~ Genre + Year, data=df)
new_df <- as.data.frame <- (xt)
top_300_genres_years = head(arrange(new_df, desc(Freq)), 300)
library(dplyr)
df <- read.csv("500albums/albumlist.csv")
xt <- xtabs(~ Genre + Year, data=df)
new_df <- as.data.frame <- (xt)
top_300_genres_years = head(arrange(new_df, desc(Freq)), 300)
xt <- xtabs(~ Genre + Year, data=df)
new_df <- as.data.frame <- (xt)
top_300_genres_years = head(arrange(new_df, desc(Freq)), 300)
new_df <- as.data.frame(xt)
top_300_genres_years = head(arrange(new_df, desc(Freq)), 300)
new_df <- as.data.frame(xtabs(~ Genre + Year, data=df))
top_300_genres_years = head(arrange(new_df, desc(Freq)), 300)
top_300_genres_years
packrat::init(options = list(external.packages = c("dplyr", "bnlearn")))
df = read.csv('spambase/spambase.data')
rm(adj)
rm(e)
rm(printPercentages)
rm(named_nodes)
rm(as.data.frame)
rm(xt)
rm(new_df)
rm(top_300_genres_years)
summay(df)
summary(df)
head(df)
names = read.csv('spambase/spambase.names')
names = read.csv('spambase/spambase.names')
summary(df$X1)
summary(df$X1)
summary(df$X0)
df$X0.mean()
mean(df$X0)
mean = mean(df$X0)
df$X0[df$X0 > mean(df$X0)] <- 1
df$X0[df$X0 < mean(df$X0)] <- 0
summary(df$X0)
colnames(df)
names = colnames(df)
names
summary(df[names[0]])
df[names[0]]
names[0]
names[1]
df[names[1]]
summary(df[names[1]])
names
names(df)[names(df) == 'X1'] <- 'spam'
names = colnames(df)
names
for (name in names){
pritn(name)
}
for (name in names){
print(name)
}
for (name in names){
print(summary(df[name]))
}
names[-1:]
names = colnames(df)
names[-1:]
names <- colnames(df)
names
names[-1:]
names[:-1]
names[0:-1]
names[0:1]
names[0:56]
names[0:57]
names
names <- colnames(df)
names
names <- colnames(df)[0:57]
names
df = read.csv('spambase/spambase.data')
names <- colnames(df)[0:57]
for (name in names){
print(summary(df[name]))
mean = mean(df[name])
df[name][df[name] > mean] <- 1
df[name][df[name] < mean] <- 0
}
summary(df)
summary(df$X0)
name <- 'X0'
mean = mean(df[name])
summarydf[name]
summary(df[name])
mean(df[name])
mean(df[[name]])
summary(df$X0)
name <- 'X0'
summary(df[name])
summary(df[[name]])
mean <- mean(df[[name]])
df[[name]][df[[name]] > mean] <- 1
df[[name]][df[[name]] < mean] <- 0
summary(df[[name]])
names <- colnames(df)[0:57]
for (name in names){
mean <- mean(df[[name]])
df[[name]][df[[name]] > mean] <- 1
df[[name]][df[[name]] < mean] <- 0
}
summary(df)
df = read.csv('spambase/spambase.data')
summary(df$X3.756)
df = read.csv('spambase/spambase.data')
names <- colnames(df)[0:57]
for (name in names){
mean <- mean(df[[name]])
df[[name]][df[[name]] <= mean] <- 0
df[[name]][df[[name]] > mean] <- 1
}
summary(df$X3.756)
summary(df)
install.packages('caTools')
names(df)[names(df) == 'X1'] <- 'spam'
names(df)[names(df) == 'X1'] <- 'spam'
summary(df)
split = sample.split(df$spam, SplitRatio = 0.6)
library(caTools)
split = sample.split(df$spam, SplitRatio = 0.6)
split
training_set = subset(df, split = TRUE)
test_set = subset(df, split = FALSE)
summary(training_set)
summary(test_set)
test_set.count()
count(test_set)
count(training_set)
training_set = subset(df, split == TRUE)
test_set = subset(df, split == FALSE)
count(training_set)
count(test_set)
2760+1840
install.packages('e1071')
library(e1071)
summary(df)
summary(training_set)
summary(training_set[-spam])
summary(training_set[-58])
summary(training_set[-57])
summary(training_set[-59])
summary(training_set[-58])
classifier = naiveBayes(x = training_set[-58], y = training_set$spam)
y_pred = predict(classifier, newdata = test_set[-58])
y_pred
cm = table(test_set[,58], y_pred)
# last column (index 58): 1 spam, 0 not
df = read.csv('spambase/spambase.data')
names <- colnames(df)[0:57]
for (name in names){
mean <- mean(df[[name]])
df[[name]][df[[name]] <= mean] <- 0
df[[name]][df[[name]] > mean] <- 1
}
names(df)[names(df) == 'X1'] <- 'spam'
df$spam = factor(df$spam, levels = c(0,1))
library(caTools)
split = sample.split(df$spam, SplitRatio = 0.6)
training_set = subset(df, split == TRUE)
test_set = subset(df, split == FALSE)
library(e1071)
classifier = naiveBayes(x = training_set[-58], y = training_set$spam)
y_pred = predict(classifier, newdata = test_set[-58])
cm = table(test_set[,58], y_pred)
cm
y_pred
cm[0]
cm[0, 0]
cm[0][0]
cm[0, 0]
cm[0, "0"]
cm[0, "0"][0]
cm[1, "0"]
cm[1, 0]
true_negatives = cm[1, "0"]
false_negatives = cm[2, "0"]
false_positives = cm[1, "1"]
true_positives = cm[2, "1"]
true_negatives
cm
false_negatives
false_positives
true_positives
count(cm)
length(cm)
total = true_negatives + false_negatives + false_positives + true_positives
# Ã© muito ruim ter o nÃºmero de false positives tÃ£o elevado
total
accuracy = (true_negatives + true_positives)/total
accuracy
TN = true_negatives = cm[1, "0"]
TN
true_negatives
sensitivity = TP/(TP+FN)
TP = true_positives = cm[2, "1"]
FN = false_negatives = cm[2, "0"]
FP = false_positives = cm[1, "1"]
sensitivity = TP/(TP+FN)
sensitivity
specificity = TN/(TN+FP) #
specificity
sensitivity * (1- specificity)
precision = TP/(TP+FP)
precision
install.packages('Metrics')
library(Metrics)
mse(actual = test_set[,58], y_pred)
mse(actual = test_set[,58], predicted = y_pred)
test_set[,58]
y_pred
test_set[,58] = factor(test_set[,58], levels = c(0,1))
y_pred = factor(y_pred, levels = c(0,1))
mse(actual = test_set[,58], predicted = y_pred)
print(i)
for (i in seq_along(y_pred)){
print(i)
}
count(y_pred)
length(y_pred)
sum = 0
sum += 1
sum = sum + 1
sum
sum = 0
test_set[,58][1]
sum = sum + test_set[,58][1]
mse(actual = as.numeric(test_set[,58]), predicted = y_pred)
mse(actual = as.numeric(test_set[,58]), predicted = as.numeric(y_pred))
as.numeric(test_set[,58])
mse(actual = as.integer(test_set[,58]), predicted = as.integer(y_pred))
